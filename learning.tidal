-- The editor e.g. atom-tidalcycles scopes a bunch of connections to Superdirt
-- https://github.com/tidalcycles/atom-tidalcycles/blob/ac9e0e1b777dc0ba1e433bc65834a486b12533fa/lib/BootTidal.hs

(d1, t1) <- superDirtSetters getNow


-- https://github.com/tidalcycles/Tidal/blob/master/Sound/Tidal/Params.hs#L53
sound :: Pattern String -> ParamPattern

-- OK, so sound transforms `sound "bd:0 sd:2 bd:1 bd:4"`

d1 $ sound "bd:0 sd:2 bd:1 bd:4"

-- to it's internal grouped structure. Something like:

Data.Map.fromList [("bd", 0), ("sd", 2), ("bd", 1), ("bd", 4)]

--------------------------------------------------------------------------------
-- SO D1 needs ParamPattern's !
--------------------------------------------------------------------------------

--https://hackage.haskell.org/package/tidal-0.9.6

type ParamMap = Map Param Value
type ParamPattern = Pattern ParamMap


-- SO, Pattern's can be transformed with a function e.g.
rev :: Pattern a -> Pattern a

d1 $ sound "bd*2 bd bd sn"

d1 $ rev (sound "bd*2 bd bd sn")

-- which is the same as:

d1 $ sound "sn bd bd bd*2"


-- TODO
-- So how does Patterns work with FX ? How are those functions combined ?
-- What actually gets set over to SC ?

d1 $ sound "arpy*4"
|=| speed "1"
|+| speed "1"

|+| speed "1"


d1 $ n "[0..7] [3..1]" # sound "supergong"

d1 $ sound "arpy" # speed "[1, 4.5]"







-- THe Hash Function

-- See Combining Patterns : https://tidalcycles.org/patterns.html
-- Remember that # is shorthand for |=|.




-- yaxu [3:19 PM]
-- `discretise 4 $ sound "bd"` is equivalent to `sound "bd bd bd bd"`
--
-- it's useful for continuous patterns like `sine` which don't have any structure otherwise

-- daniels example

d1
$ sometimesBy 0.4 (# crush 4) (sound "808bd:1")


$ sometimesBy (1/8)(iter (discretise (1/21) $ choose [1..16]))

$ fast (discretise (1/3) $ choose [8..64])



# gain (discretise (1/2) $ slow 0.1 $ scalex 0.1 4 $ rand)
# n (discretise (1/5) $ slow 0.11 $ choose [0..24])
# delay (discretise (1/7) $ slow 0.12 $ scalex 1 0.5 $ rand)
# delayfb (discretise (1/9) $ slow 0.13 $ scalex 1 0.75 $ rand)
# delayt (discretise (1/11) $ slow 0.14 $ scalex 0.000001 4 $ rand)
# shape (discretise (1/13) $ slow 0.15 $ scalex 0.5 0.999999 $ rand)
# up (discretise (1/15) $ slow 0.16 $ scale 0 24 $ rand)
# pan (discretise (1/17) $ slow 0.17 $ rand)
# accelerate (discretise (1/19) $ slow 0.18 $ scale (-0.25) 0.25 $ rand)
# lpf (discretise (1/23) $ slow 0.19 $ scalex 40 20000 $ rand)
# hpf (discretise (1/25) $ slow 0.20 $ scalex 10000 20 $ rand)
# speed (discretise (1/27) $ slow 0.21 $ choose [-1,1,1])
# cut (discretise (1/29) $ slow 0.22 $ choose [0,0,0,1])
# orbit ch1_2

-- msp play

d1
$ sometimesBy (1/8)(iter (discretise (1/21) $ choose [1..16]))
$ s "sine"
# gain (discretise (1/2) $ slow 0.1 $ scalex 0.1 4 $ rand)

d1 silence


d1
$ s "sine"
# gain (fast 1 $ scalex 0.1 4 $ sine)

# gain (discretise (1/2) $ sine)



-- discretise :: Time -> Pattern a -> Pattern a
d1 $ discretise 4 (sound "bd sd bd sd")

d1 $ sound "bd sd bd sd"
# show

-- choose :: [a] -> Pattern a
-- I can;t plug in a choose here as that returns a pattern!

-- what about irand?
-- d1 $ discretise (irand 4) (sound "bd sd bd sd")

-- nope! So back to discretise

d1 $ discretise 1000 (sound "sine")

d1 $ e 4 8 $ sound "bd"

d1 $ e 5 (choose[8,16]) $ sound "bd"

d1 $ e 5 (choose[7]) $ sound "bd"
